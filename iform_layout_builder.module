<?php
use Drupal\Core\StreamWrapper\PublicStream;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\iform_layout_builder\Indicia\SurveyStructure;
use Drupal\iform_layout_builder\Indicia\SampleOccurrenceHandler;
use Drupal\Core\Form\FormStateInterface;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\Component\Serialization\Yaml;

/**
 * Implements hook_library_info_build().
 * Builds library definiation that gets allows the addition of a Javascript file per node if it exists
 * @return array $libraries Array of library definitions to which the required libraries will
 * be appended.
 */
function iform_layout_builder_library_info_build() {
  $node = \Drupal::routeMatch()->getParameter('node');

  if (file_exists(PublicStream::basePath() . '/indicia/js/node.' . $node->id() . '.js')) {
    $libraries['my_module_node_js'] = [
      'version' => '1.x',
      'js' => [
        "/".hostsite_get_public_file_path() . '/indicia/js/node.' . $node->id() . '.js' => [],
      ],
    ];
    return $libraries;
  }
  return [];
}

/**
 * Implements hook_preprocess_node().
 * Includes a custom library for the node if it exists
 */
function iform_layout_builder_preprocess_node(&$variables) {
  $node = $variables['node'];

  if(file_exists(PublicStream::basePath() . '/indicia/js/node.' . $node->id() . '.js')){
    $variables['#attached']['library'][] = 'iform_layout_builder/my_module_node_js';
  }
}

/**
 * Implements hook_modules_installed().
 *
 * Field required for overrideable layouts cannot be applied using
 * config/install folder because it would depend on the layout builder's entity
 * field storage existing, which will only be the case if another entity has
 * overrideable layouts enabled. If we include in the config and it does exist
 * then you get a conflict. So, the entity view config is applied without
 * layout builder, then we manually enable overrideable layouts, and reapply
 * the correct layout via config.
 */
function iform_layout_builder_modules_installed($modules) {
  if (in_array('iform_layout_builder', $modules)) {
    LayoutBuilderEntityViewDisplay::load('node.iform_layout_builder_form.default')
      ->enableLayoutBuilder()
      ->setOverridable()
      ->save();

    // Replace these configs.  We're using code to do this, as they are already
    // installed.
    $config_files = [
      'core.entity_view_display.node.iform_layout_builder_form.default',
    ];

    foreach ($config_files as $config_id) {
      $raw_data = file_get_contents(\Drupal::service('extension.list.module')->getPath('iform_layout_builder') . '/config/after_install/' . $config_id . '.yml');
      \Drupal::configFactory()->getEditable($config_id)
        ->setData(Yaml::decode($raw_data))
        ->save();
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 *
 * Curate the blocks available in the Structure > Block Layout "Place Block" UI
 * as we don't want data entry control blocks available.
 */
function iform_layout_builder_plugin_filter_block__block_ui_alter(array &$definitions, array $extra) {
  foreach ($definitions as $id => $definition) {
    if ($definition['provider'] === 'iform_layout_builder' && substr($id, 0, 11) === 'data_entry_') {
      unset($definitions[$id]);
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 *
 * Curate the blocks available in the Layout Builder "Add Block" UI so iform
 * blocks are only available for the correct content type. Also tidies the
 * block labels.
 */
function iform_layout_builder_plugin_filter_block__layout_builder_alter(array &$definitions, array $extra) {
  // Is this the default layout for the type?
  $isIformLayoutBuilderForm = $extra['section_storage']->getStorageId() === 'node.iform_layout_builder_form.default';
  $isIformLayoutBuilderReport = $extra['section_storage']->getStorageId() === 'node.iform_layout_builder_report.default';
  // Or a node for one of our types?
  if (preg_match('/^node\.(?<nid>\d+)$/', $extra['section_storage']->getStorageId(), $matches)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($matches['nid']);
    $isIformLayoutBuilderForm = $node->bundle() === 'iform_layout_builder_form';
    $isIformLayoutBuilderReport = $node->bundle() === 'iform_layout_builder_report';
    if ($isIformLayoutBuilderForm) {
      $formType = $node->field_form_type->value;
    }
  }
  foreach ($definitions as $id => &$definition) {
    if ($isIformLayoutBuilderForm) {
      $blockNameParts = explode('_', $id);
      $isDataEntryControl = count($blockNameParts) > 2 && "$blockNameParts[0]_$blockNameParts[1]" === 'data_entry';
      // Only data entry blocks on a form.
      // @todo consider if we should allow other blocks or make this configurable.
      if ($definition['provider'] !== 'iform_layout_builder' || !$isDataEntryControl) {
        unset($definitions[$id]);
      }
      elseif (count($blockNameParts) >= 4 &&
          $blockNameParts[2] === 'species' && $blockNameParts[3] !== $formType) {
        // Only allow correct type of species input for the form type.
        unset($definitions[$id]);
      }
      elseif ($formType !== 'single' && preg_match('/^data_entry_occurrence_(?!custom_attribute)/', $id)) {
        // Only allow occurrence controls on single occurrence input form,
        // otherwise they are columns in the grid.
        unset($definitions[$id]);
      }
      elseif (isset($definition['layout_builder_label'])) {
        $definition['admin_label'] = $definition['layout_builder_label'];
      }
      elseif (preg_match('/^Indicia data entry (.+) block/', $definition['admin_label']->render(), $matches)) {
        // Tidy the label.
        $definition['admin_label'] = t(ucfirst($matches[1]));
      }
    }
    elseif ($isIformLayoutBuilderReport) {
      // @todo consider if we should allow other blocks apart from data entry
      // or make this configurable.
      if ($definition['provider'] !== 'iform_layout_builder' || substr($id, 0, 7) !== 'report_') {
        unset($definitions[$id]);
      }
    }
    else {
      // Hide data entry blocks from other Drupal content.
      if ($definition['provider'] === 'iform_layout_builder' && substr($id, 0, 11) === 'data_entry_') {
        unset($definitions[$id]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add an extra handler to catch when a layout form submitted.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_layout_builder_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'iform_layout_builder_layout_submit';
}

/**
 * On layout form submit, record that the survey structure needs checking.
 */
function iform_layout_builder_layout_submit(&$form, FormStateInterface $form_state) {
  try {
    // As we've made edits, for this user we want to switch to
    // list_termlists_terms rather than the cached version so they see updates
    // instantly.
    $_SESSION['iform_layout_builder-no_termlist_cache'] = TRUE;
    // Also reload local cached copy of warehouse data.
    $_SESSION['iform-refreshcache'] = TRUE;
    $entity = $form_state->getFormObject()->getEntity();
    $surveyStructure = new SurveyStructure();
    $surveyStructure->checkAttrsExists($entity);
    $entity->save();
  }
  catch (Exception $e) {
    \Drupal::logger('iform_layout_builder')->error($e->getMessage());
    \Drupal::messenger()->addError(t('An error occurred whilst saving the form layout. More information is available in the Drupal logs.'));
  }
}

function iform_layout_builder_alter_data_entry_form(&$form, FormStateInterface $form_state, $inserting) {
  $form['actions']['submit']['#submit'][] = 'iform_layout_builder_data_entry_form_submit';
  $form['field_survey_id']['#access'] = FALSE;
  $value = $form['field_survey_id']['widget'][0]['value']['#default_value'];
  $form['field_survey_id_selector'] = [
    '#type' => 'select',
    '#options' => get_survey_dataset_widget_options(),
    '#title' => $form['field_survey_id']['widget']['#title'],
    '#description' => $form['field_survey_id']['widget']['#description'],
    '#default_value' => $value,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For the create form:
 * * Add an extra handler to catch when a form node form submitted.
 * * Replaces the survey dataset integer control with a select.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  iform_layout_builder_alter_data_entry_form($form, $form_state, TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For the edit form:
 * * Add an extra handler to catch when a form node form submitted.
 * * Replaces the survey dataset integer control with a select.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  iform_layout_builder_alter_data_entry_form($form, $form_state, FALSE);
  if (!empty($form['field_form_type']['widget']['#default_value'])) {
    $form['field_form_type']['widget']['#attributes'] = ['disabled' => 'disabled'];
    $form['field_form_type']['widget']['#description'] = t('This cannot be changed for existing forms.');
  }
}

/**
 * Callback function to populate the list of surveys on form edit tabs.
 */
function get_survey_dataset_widget_options() {
  $surveyStructure = new SurveyStructure();
  return [
    '0' => '-Create new survey dataset-',
  ] + $surveyStructure->getSurveyList();
}

/**
 * Edit form submit handler which handles survey dataset creation.
 */
function iform_layout_builder_data_entry_form_submit($form, FormStateInterface $form_state) {
  $surveyId = $form_state->getValue('field_survey_id_selector');
  $savedSurveyId = $form_state->getValue('field_survey_id')[0]['value'];
  if ($surveyId === '0' || $surveyId !== $savedSurveyId) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($surveyId === '0') {
      // Create new survey selected.
      $surveyStructure = new SurveyStructure();
      $surveyStructure->createSurvey($entity);
    }
    elseif ($surveyId !== $savedSurveyId) {
      // User has switched form to a different existing survey.
      $entity->set('field_survey_id', $surveyId);
      $entity->save();
    }
  }
}

/**
 * Implements hook_entity_prepare_view().
 *
 * * Detects loading a layout builder form after form layout save and clears
 *   the Indicia cache for the page.
 * * Detects save of a recording form and posts the records to the warehouse.
 * * Detects the load of an existing record and fetches the data to edit.
 */
function iform_layout_builder_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {
  if ($entity_type_id === 'node' && $view_mode !== 'search_index') {
    foreach ($entities as $entity) {
      if ($entity->bundle() === 'iform_layout_builder_form') {
        if (isset($_SESSION['iform-refreshcache'])) {
          // If just saved the layout form, clear the cache.
          $_GET['refreshcache'] = 't';
          unset($_SESSION['iform-refreshcache']);
        }
        if (!empty($_POST) || !empty($_GET)) {
          iform_load_helpers(['data_entry_helper']);
          if (!empty($_POST)) {
            $handler = new SampleOccurrenceHandler();
            $handler->postRecord($_POST, $entity);
          }
          // Fetch existing records before block build occurs.
          if (!empty($_GET['occurrence_id']) || !empty($_GET['sample_id'])) {
            $handler = new SampleOccurrenceHandler();
            if (!empty($_GET['occurrence_id'])) {
              $handler->getExistingOccurrence($_GET['occurrence_id'], $entity);
            }
            elseif (!empty($_GET['sample_id'])) {
              $handler->getExistingSample($_GET['sample_id'], $entity);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * * Wrap <form> elements around form page content.
 * * Checks if posting record data and submits to the warehouse.
 * * Checks if saving a changed layout and refreshes the survey warehouse
 *   configuration.
 * * Attaches a scratchpad based sensitive species control if configured.
 */
function iform_layout_builder_node_view(array &$build, EntityInterface $entity,
    \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'iform_layout_builder_form' && $view_mode !== 'search_index') {
    iform_load_helpers(['data_entry_helper']);
    \data_entry_helper::enable_validation('indicia-entry-form');
    $class = $entity->field_template->value === '1' ? ' class="form-template alert alert-warning"' : '';
    $msg = $entity->field_template->value === '1' ? '<div class="alert alert-danger">' .
      t('This is a form template and should not be used to submit records') . '</div>' : '';
    if (!empty(\data_entry_helper::$entity_to_load['occurrence:id'])) {
      $build[] = [
        '#type' => 'hidden',
        '#name' => 'occurrence:id',
        '#value' => \data_entry_helper::$entity_to_load['occurrence:id'],
      ];
    }
    $config = \Drupal::config('iform_layout_builder.settings');
    $sensitiveSpeciesListId = $config->get('sensitivity_scratchpad_list_id');
    if (!empty($sensitiveSpeciesListId)) {
      iform_layout_builder_sensitivity_control($sensitiveSpeciesListId);
    }
    if (!empty(\data_entry_helper::$entity_to_load['sample:id'])) {
      $build['sample_id'] = [
        '#type' => 'hidden',
        '#name' => 'sample:id',
        '#value' => \data_entry_helper::$entity_to_load['sample:id'],
      ];
    }
    $build = array_merge([
        'form_header' => [
          '#markup' => new FormattableMarkup("<form autocomplete=\"off\" method=\"POST\" id=\"indicia-entry-form\"$class>$msg", []),
        ],
      ],
      $build,
      [
        'form_footer' => [
          '#markup' =>  new FormattableMarkup('</form>', []),
        ],
      ]
    );
    $build['#attached'] = [
      'library' => [
        'iform_layout_builder/block.base',
        'iform/font_awesome',
      ],
    ];
  }
}

function iform_layout_builder_sensitivity_control($sensitiveSpeciesListId) {
  iform_load_helpers(['report_helper']);
  $iformConfig = \Drupal::config('iform.settings');
  $conn = iform_get_connection_details();
  $readAuth = \helper_base::get_read_auth($conn['website_id'], $conn['password']);
  $data = report_helper::get_report_data([
    'dataSource' => 'library/taxa/taxa_taxon_list_ids_for_scratchpad',
    'readAuth' => $readAuth,
    'extraParams' => [
      'scratchpad_list_id' => $sensitiveSpeciesListId,
      'taxon_list_ids' => $iformConfig->get('master_checklist_id'),
    ],
    'caching' => TRUE,
    'cachePerUser' => FALSE,
  ]);
  $idArray = [];
  foreach ($data as $row) {
    $idArray[] = $row['taxa_taxon_list_id'];
  }
  \helper_base::addLanguageStringsToJs('sensitivityScratchpad', [
    'sensitiveMessage' => 'This species is sensitive so has been blurred for you.',
  ]);
  $idJson = json_encode($idArray);
  report_helper::$javascript .= <<<JS
indiciaData.scratchpadBlursTo = 10000;
indiciaData.scratchpadBlurList = $idJson;
indiciaFns.enableScratchpadBlurList();

JS;
}
