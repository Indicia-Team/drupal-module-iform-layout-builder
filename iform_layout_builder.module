<?php

use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Entity\EntityInterface;
use Drupal\iform_layout_builder\Indicia\SurveyStructure;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 *
 * Curate the blocks available in the Structure > Block Layout "Place Block" UI
 * as we don't want data entry control blocks available.
 */
function iform_layout_builder_plugin_filter_block__block_ui_alter(array &$definitions, array $extra) {
  foreach ($definitions as $id => $definition) {
    if ($definition['provider'] === 'iform_layout_builder' && substr($id, 0, 11) === 'data_entry_') {
      unset($definitions[$id]);
    }
  }
}

/**
 * Implements hook_plugin_filter_TYPE__CONSUMER_alter().
 *
 * Curate the blocks available in the Layout Builder "Add Block" UI so iform
 * blocks are only available for the correct content type. Also tidies the
 * block labels.
 */
function iform_layout_builder_plugin_filter_block__layout_builder_alter(array &$definitions, array $extra) {
  // Is this the default layout for the type?
  $isIformLayoutBuilderForm = $extra['section_storage']->getStorageId() === 'node.iform_layout_builder_form.default';
  $isIformLayoutBuilderReport = $extra['section_storage']->getStorageId() === 'node.iform_layout_builder_report.default';
  // Or a node for one of our types?
  if (preg_match('/^node\.(?<nid>\d+)$/', $extra['section_storage']->getStorageId(), $matches)) {
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($matches['nid']);
    $isIformLayoutBuilderForm = $node->bundle() === 'iform_layout_builder_form';
    $isIformLayoutBuilderReport = $node->bundle() === 'iform_layout_builder_report';
    if ($isIformLayoutBuilderForm) {
      $formType = $node->field_form_type->value;
    }
  }
  /*$settings['locale_custom_strings_en'][''] = [
    'Add section'      => 'board',
  ]*/
  foreach ($definitions as $id => &$definition) {
    if ($isIformLayoutBuilderForm) {
      $blockNameParts = explode('_', $id);
      $isDataEntryControl = count($blockNameParts) > 2 && "$blockNameParts[0]_$blockNameParts[1]" === 'data_entry';
      // Only data entry blocks on a form.
      // @todo consider if we should allow other blocks or make this configurable.
      if ($definition['provider'] !== 'iform_layout_builder' || !$isDataEntryControl) {
        unset($definitions[$id]);
      }
      elseif (count($blockNameParts) >= 4 &&
          $blockNameParts[2] === 'species' && $blockNameParts[3] !== $formType) {
        // Only allow correct type of species input for the form type.
        unset($definitions[$id]);
      }
      elseif ($formType !== 'single' && preg_match('/^data_entry_occurrence_(?!custom_attribute)/', $id)) {
        // Only allow occurrence controls on single occurrence input form,
        // otherwise they are columns in the grid.
        unset($definitions[$id]);
      }
      elseif (isset($definition['layout_builder_label'])) {
        $definition['admin_label'] = $definition['layout_builder_label'];
      }
      elseif (preg_match('/^Indicia data entry (.+) block/', $definition['admin_label']->render(), $matches)) {
        // Tidy the label.
        $definition['admin_label'] = t(ucfirst($matches[1]));
      }
    }
    elseif ($isIformLayoutBuilderReport) {
      // @todo consider if we should allow other blocks apart from data entry
      // or make this configurable.
      if ($definition['provider'] !== 'iform_layout_builder' || substr($id, 0, 7) !== 'report_') {
        unset($definitions[$id]);
      }
    }
    else {
      // Hide data entry blocks from other Drupal content.
      if ($definition['provider'] === 'iform_layout_builder' && substr($id, 0, 11) === 'data_entry_') {
        unset($definitions[$id]);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add an extra handler to catch when a layout form submitted.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_layout_builder_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'iform_layout_builder_layout_submit';
}

/**
 * On layout form submit, record that the survey structure needs checking.
 */
function iform_layout_builder_layout_submit(&$form, FormStateInterface $form_state) {
  // As we've made edits, for this user we want to switch to
  // list_termlists_terms rather than the cached version so they see updates
  // instantly.
  $_SESSION['iform_layout_builder-no_termlist_cache'] = TRUE;
  // Also reload local cached copy of warehouse data.
  $_SESSION['iform-refreshcache'] = TRUE;
  $entity = $form_state->getFormObject()->getEntity();
  $surveyStructure = new SurveyStructure();
  $surveyStructure->checkAttrsExists($entity);
  $entity->save();
}

function iform_layout_builder_alter_data_entry_form(&$form, FormStateInterface $form_state, $inserting) {
  $form['actions']['submit']['#submit'][] = 'iform_layout_builder_data_entry_form_submit';
  $form['field_survey_id']['#access'] = FALSE;
  $value = $form['field_survey_id']['widget'][0]['value']['#default_value'];
  $form['field_survey_id_selector'] = [
    '#type' => 'select',
    '#options' => get_survey_dataset_widget_options(),
    '#title' => $form['field_survey_id']['widget']['#title'],
    '#description' => $form['field_survey_id']['widget']['#description'],
    '#default_value' => $value,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For the create form:
 * * Add an extra handler to catch when a form node form submitted.
 * * Replaces the survey dataset integer control with a select.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  iform_layout_builder_alter_data_entry_form($form, $form_state, TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * For the edit form:
 * * Add an extra handler to catch when a form node form submitted.
 * * Replaces the survey dataset integer control with a select.
 */
function iform_layout_builder_form_node_iform_layout_builder_form_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  iform_layout_builder_alter_data_entry_form($form, $form_state, FALSE);
  if (!empty($form['field_form_type']['widget']['#default_value'])) {
    $form['field_form_type']['widget']['#attributes'] = ['disabled' => 'disabled'];
    $form['field_form_type']['widget']['#description'] = t('This cannot be changed for existing forms.');
  }
}

/**
 * Callback function to populate the list of surveys on form edit tabs.
 */
function get_survey_dataset_widget_options() {
  $surveyStructure = new SurveyStructure();
  return [
    '0' => '-Create new survey dataset-',
  ] + $surveyStructure->getSurveyList();
}

/**
 * Edit form submit handler which handles survey dataset creation.
 */
function iform_layout_builder_data_entry_form_submit($form, FormStateInterface $form_state) {
  $surveyId = $form_state->getValue('field_survey_id_selector');
  $savedSurveyId = $form_state->getValue('field_survey_id')[0]['value'];
  if ($surveyId === '0' || $surveyId !== $savedSurveyId) {
    $entity = $form_state->getFormObject()->getEntity();
    if ($surveyId === '0') {
      // Create new survey selected.
      $surveyStructure = new SurveyStructure();
      $surveyStructure->createSurvey($entity);
    }
    elseif ($surveyId !== $savedSurveyId) {
      // User has switched form to a different existing survey.
      $entity->set('field_survey_id', $surveyId);
      $entity->save();
    }
  }
}

/**
 * Implements hook_entity_prepare_view().
 *
 * Detects loading a layout builder form after form layout save and clears the
 * Indicia cache for the page.
 */
function iform_layout_builder_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {
  if ($entity_type_id === 'node') {
    foreach ($entities as $entity) {
      if ($entity->bundle() === 'iform_layout_builder_form' && isset($_SESSION['iform-refreshcache'])) {
        // If just saved the layout form, clear the cache.
        $_GET['refreshcache'] = 't';
        unset($_SESSION['iform-refreshcache']);
      }
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * * Wrap <form> elements around form page content.
 * * Checks if posting record data and submits to the warehouse.
 * * Checks if saving a changed layout and refreshes the survey warehouse
 *   configuration.
 */
function iform_layout_builder_node_view(array &$build, EntityInterface $entity,
    \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() === 'iform_layout_builder_form') {
    iform_load_helpers(['data_entry_helper']);
    \data_entry_helper::enable_validation('indicia-entry-form');
    if (!empty($_POST)) {
      $config = \Drupal::config('iform.settings');
      // @todo behaviour around zero abundance
      // @todo Convert to REST call
      $auth = data_entry_helper::get_read_write_auth($config->get('website_id'), $config->get('password'));
      $values = array_merge($_POST, [
        'website_id' => $config->get('website_id'),
        'survey_id' => $entity->field_survey_id->value,
      ]);
      if ($entity->field_form_type->value === 'single') {
        $submission = data_entry_helper::build_sample_occurrence_submission($values);
      }
      else {
        $submission = data_entry_helper::build_sample_occurrences_list_submission($values);
      }
      $response = data_entry_helper::forward_post_to('save', $submission, $auth['write_tokens']);
      if (is_array($response) && array_key_exists('success', $response)) {
        \Drupal::messenger()->addMessage("Thank you for the record");
      }
      elseif (isset($response['errors'])) {
        foreach ($response['errors'] as $key => $msg) {
          \Drupal::messenger()->addWarning(str_replace(':', ' ', $key) . ' - ' . $msg);
          // @todo Display errors correctly alongside controls.
        }
      }
    }
    $build = array_merge([
        'form_header' => [
          '#markup' => new FormattableMarkup('<form autocomplete="off" method="POST" id="indicia-entry-form">', []),
        ],
      ],
      $build,
      [
        'form_footer' => [
          '#markup' =>  new FormattableMarkup('</form>', []),
        ],
      ]
    );
  }
}
